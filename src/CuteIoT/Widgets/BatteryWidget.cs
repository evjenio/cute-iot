using System;
using CuteIoT.Epaper;

namespace CuteIoT.Widgets
{
    internal class BatteryWidget
    {
        public int X { get; set; } = 250 - 16;
        public int Y { get; set; } = 0;
        public int H { get; set; } = 16;
        public int W { get; set; } = 16;

        private static readonly byte[] Battery0 = {
// 'icons8-battery-16 (0)', 16x16px
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x01, 0x9f, 0xfc, 0xbf, 0xfe, 0x3f, 0xfe, 0x7f, 0xfe,
0x7f, 0xfe, 0x3f, 0xfe, 0xbf, 0xfe, 0x9f, 0xfc, 0xc0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
        };

        private static readonly byte[] Battery25 = {
// 'icons8-battery-16 (25)', 16x16px
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x01, 0x9f, 0xf0, 0xbf, 0xf0, 0x3f, 0xf0, 0x7f, 0xf0,
0x7f, 0xf0, 0x3f, 0xf0, 0xbf, 0xf0, 0x9f, 0xf0, 0xc0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
        };

        private static readonly byte[] Battery50 = {
// 'icons8-battery-16 (50)', 16x16px
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x01, 0x9f, 0x00, 0xbf, 0x00, 0x3f, 0x00, 0x7f, 0x00,
0x7f, 0x00, 0x3f, 0x00, 0xbf, 0x00, 0x9f, 0x00, 0xc0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
        };

        private static readonly byte[] Battery75 = {
// 'icons8-battery-16 (75)', 16x16px
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x01, 0x80, 0x00, 0xb0, 0x00, 0x30, 0x00, 0x70, 0x00,
0x70, 0x00, 0x30, 0x00, 0xb0, 0x00, 0x80, 0x00, 0xc0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
        };

        private static readonly byte[] Battery100 = {
// 'icons8-battery-16 (100)', 16x16px
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x01, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0xc0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
        };

        private static readonly byte[] BatteryCharging = {
// 'icons8-battery-16 (chrg)', 16x16px
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x01, 0x80, 0x00, 0x80, 0x00, 0x00, 0x40, 0x00, 0x70,
0x03, 0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0xc0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
        };

        public void Draw(Display display, double voltage)
        {
            const int xOffset = 34;

            var batteryIcon = GetIcon(voltage);

            display.SetFontSize(1);
            display.SetCursor(X - xOffset, Y + 5);
            display.Write(voltage.ToString("F2") + "v");
            display.DrawBitmap(batteryIcon, X, Y, W, H, Color.White);
            //display.UpdateWindow(X - xOffset, Y, W + xOffset, H);
        }

        private byte[] GetIcon(double voltage)
        {
            if (voltage < 3.61)
            {
                return Battery0;
            }
            else if (voltage < 3.77)
            {
                return Battery25;
            }
            else if (voltage < 3.85)
            {
                return Battery50;
            }
            else if (voltage < 4.02)
            {
                return Battery75;
            }
            else if (voltage < 4.20)
            {
                return Battery100;
            }

            return BatteryCharging;
        }
    }
}
