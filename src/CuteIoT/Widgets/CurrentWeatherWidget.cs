using System;
using CuteIoT.Epaper;
using CuteIoT.Services;

namespace CuteIoT.Widgets
{
    internal class CurrentWeatherWidget
    {
        public int X { get; set; } = 80;
        public int Y { get; set; } = 50;
        private const int H = 48 + 14;
        //private const int W = 2 * 48;
        private const int IconHeight = 48;
        private const int IconWidth = 48;

        private static readonly byte[] Snowflake = {
            // 'icons8-winter-48', 48x48px
            0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f,
            0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x8c, 0x31, 0xff, 0xff, 0xff, 0xff,
            0x84, 0x21, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff,
            0xff, 0xcf, 0xe0, 0x07, 0xf3, 0xff, 0xff, 0x87, 0xf0, 0x0f, 0xe1, 0xff, 0xff, 0x87, 0xf8, 0x1f,
            0xe1, 0xff, 0xf3, 0x87, 0xfc, 0x3f, 0xe1, 0xc7, 0xe0, 0xc7, 0xfc, 0x3f, 0xe3, 0x07, 0xe0, 0x03,
            0xfc, 0x3f, 0xc0, 0x07, 0xf0, 0x03, 0xfc, 0x3f, 0xc0, 0x0f, 0xfc, 0x03, 0xfc, 0x3f, 0xc0, 0x1f,
            0xfe, 0x01, 0xfc, 0x3f, 0x80, 0x7f, 0xfc, 0x00, 0xfc, 0x3f, 0x00, 0x3f, 0xf0, 0x00, 0x3c, 0x3c,
            0x00, 0x0f, 0xe0, 0x00, 0x0c, 0x30, 0x00, 0x07, 0xf0, 0x7c, 0x00, 0x00, 0x3e, 0x0f, 0xff, 0xff,
            0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff,
            0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
            0xff, 0xff, 0xf0, 0x7c, 0x00, 0x00, 0x3e, 0x07, 0xe0, 0x00, 0x0c, 0x30, 0x00, 0x07, 0xf0, 0x00,
            0x3c, 0x3c, 0x00, 0x0f, 0xfc, 0x00, 0xfc, 0x3f, 0x00, 0x3f, 0xfe, 0x01, 0xfc, 0x3f, 0x80, 0x7f,
            0xfc, 0x03, 0xfc, 0x3f, 0xc0, 0x1f, 0xf0, 0x03, 0xfc, 0x3f, 0xc0, 0x0f, 0xe0, 0x03, 0xfc, 0x3f,
            0xc0, 0x07, 0xe0, 0xc7, 0xfc, 0x3f, 0xe3, 0x07, 0xf3, 0x87, 0xfc, 0x3f, 0xe1, 0xcf, 0xff, 0x87,
            0xf8, 0x1f, 0xe1, 0xff, 0xff, 0x87, 0xf0, 0x0f, 0xe1, 0xff, 0xff, 0xcf, 0xe0, 0x07, 0xf3, 0xff,
            0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0xff, 0x84, 0x21,
            0xff, 0xff, 0xff, 0xff, 0x8c, 0x31, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff,
            0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff
        };

        public void Draw(Display display, WeatherResponse weatherResponse)
        {
            var dt = DateTime.FromUnixTimeSeconds(weatherResponse.Dt).AddSeconds(weatherResponse.Timezone);

            //icon
            display.DrawBitmap(Snowflake, X, Y, IconWidth, IconHeight, Color.White);

            //temp
            display.SetCursor(X + IconWidth + 5, Y + 3);
            display.SetFontSize(3);
            display.Write(weatherResponse.Main.Temp.ToString("F0"));
            display.AddCursorY(-2);
            display.SetFontSize(1);
            display.Write("o");

            //feels like
            display.SetCursor(X + IconWidth + 5, Y + 28 + 3);
            display.SetFontSize(2);
            display.Write(weatherResponse.Main.Feels_Like.ToString("F0"));
            display.AddCursorY(-2);
            display.SetFontSize(1);
            display.Write("o");

            // conditions
            display.SetCursor(X, Y + IconHeight + 2);
            display.Write(weatherResponse.Weather[0].Main + " @ " + dt.ToString("HH:mm:ss"));

            display.UpdateWindow(X, Y, display.Width - X, H);
        }
    }
}
